plugins {
    id 'java-library'
    id 'maven-publish'
}

version = "${minecraft_version}-${mod_version}-${project.name}"
group = mod_group

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(project.java_version)
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
    // https://docs.gradle.org/current/userguide/declaring_repositories.html#declaring_content_exclusively_found_in_one_repository
    exclusiveContent {
        forRepository {
            maven {
                name = 'Sponge'
                url = 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
        filter { includeGroupAndSubgroups('org.spongepowered') }
    }
    exclusiveContent {
        forRepositories(
                maven {
                    name = 'ParchmentMC'
                    url = 'https://maven.parchmentmc.org/'
                },
                maven {
                    name = "NeoForge"
                    url = 'https://maven.neoforged.net/releases'
                }
        )
        filter { includeGroup('org.parchmentmc.data') }
    }
    maven {
        name = 'BlameJared'
        url = 'https://maven.blamejared.com'
    }
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
}

// Declare capabilities on the outgoing configurations.
// Read more about capabilities here: https://docs.gradle.org/current/userguide/component_capabilities.html#sec:declaring-additional-capabilities-for-a-local-component
['apiElements', 'runtimeElements', 'sourcesElements', 'javadocElements'].each { variant ->
    configurations."$variant".outgoing {
        capability("$group:${base.archivesName.get()}:$version")
        capability("$group:$mod_id-${project.name}-${minecraft_version}:$version")
        capability("$group:$mod_id:$version")
    }
    publishing.publications.configureEach {
        suppressPomMetadataWarningsFor(variant)
    }
}

sourcesJar {
    dependsOn 'classes'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'

    from(rootProject.file('LICENSE')) {
        rename { "${it}_${mod_name}" }
    }
}

jar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${mod_name}" }
    }

    manifest {
        attributes([
                'Specification-Title'   : mod_name,
                'Specification-Vendor'  : mod_authors,
                'Specification-Version' : project.jar.archiveVersion,
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor' : mod_authors,
                'Built-On-Minecraft'    : minecraft_version
        ])
    }
}

compileJava {
    options.incremental = false
}

processResources {
    var expandProps = [
            'mod_id'                         : mod_id,
            'mod_name'                       : mod_name,
            'mod_version'                    : mod_version,
            'mod_license'                    : mod_license,
            'mod_url'                        : mod_url,
            'mod_update'                     : mod_update,
            'mod_tracker'                    : mod_tracker,
            'mod_credits'                    : mod_credits,
            'mod_authors'                    : mod_authors,
            'mod_group'                      : mod_group,
            'mod_description'                : mod_description,
            'minecraft_version'              : minecraft_version,
            'fabric_minecraft_version_range' : fabric_minecraft_version_range,
            'neo_minecraft_version_range'    : neo_minecraft_version_range,
            'fabric_version'                 : fabric_version,
            'fabric_version_range'           : fabric_version_range,
            'fabric_loader_version'          : fabric_loader_version,
            'fabric_loader_version_range'    : fabric_loader_version_range,
            'neo_version'                    : neo_version,
            'neo_version_range'              : neo_version_range,
            'neo_loader_version_range'       : neo_loader_version_range,
            'java_version'                   : java_version
    ]

    filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
        expand expandProps
    }
    inputs.properties(expandProps)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
            artifact project.tasks.<Jar>findByName(project.name == "fabric" ? "remapJar" : "jar")
            artifact project.tasks.<Jar>findByName(project.name == "fabric" ? "remapSourcesJar" : "sourcesJar")
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/The-Aether-Team/Cumulus"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
